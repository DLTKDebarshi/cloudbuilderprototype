name: Reusable Ansible Configuration

on:
  workflow_call:
    inputs:

      playbook:
        description: 'Playbook to run'
        required: false
        type: string
        default: 'all'
      windows_host:
        description: 'Windows host IP address'
        required: true
        type: string
      ansible_version:
        description: 'Ansible version to use'
        required: false
        type: string
        default: '6.0.0'
      aws_region:
        description: 'AWS region'
        required: false
        type: string
        default: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      USERNAME:
        required: true
      PASSWORD:
        required: true
    outputs:
      ansible_results:
        description: "Ansible playbook execution results"
        value: ${{ jobs.ansible.outputs.ansible_results }}

env:
  ANSIBLE_VERSION: ${{ inputs.ansible_version }}
  AWS_REGION: ${{ inputs.aws_region }}

jobs:
  ansible:
    name: 'Run Ansible Playbooks'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      ansible_results: ${{ steps.results.outputs.ansible_results }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible==8.0.0
        pip install pywinrm
        pip install boto3
        pip install botocore
        
    - name: Install Ansible Collections
      run: |
        ansible-galaxy collection install ansible.windows
        ansible-galaxy collection install community.windows
        ansible-galaxy collection install amazon.aws

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Debug Windows Password
      run: |
        if [ -z "${{ secrets.PASSWORD }}" ]; then
          echo "❌ ERROR: PASSWORD secret is empty or not set!"
          echo "Please check that the PASSWORD secret is configured in repository settings."
          exit 1
        else
          echo "✅ PASSWORD secret is configured and will be used for Windows authentication"
        fi

    - name: Create inventory file
      run: |
        cat > inventory.ini << EOF
        [windows]
        ${{ inputs.windows_host }} ansible_host=${{ inputs.windows_host }} ansible_user="${{ secrets.USERNAME }}" ansible_password="${{ secrets.PASSWORD }}" ansible_connection=winrm ansible_winrm_transport=basic ansible_winrm_server_cert_validation=ignore ansible_port=5985
        EOF
        
    - name: Debug inventory file
      run: |
        echo "=== Inventory File Content ==="
        cat inventory.ini | sed 's/ansible_password=[^ ]*/ansible_password=***MASKED***/'
        echo "=== End Inventory ==="
        echo "Windows Host: ${{ inputs.windows_host }}"

    - name: Create ansible.cfg
      run: |
        cat > ansible.cfg << EOF
        [defaults]
        host_key_checking = False
        inventory = inventory.ini
        remote_user = ${{ secrets.USERNAME }}
        timeout = 60
        deprecation_warnings = False
        
        [inventory]
        enable_plugins = aws_ec2
        
        [winrm]
        timeout = 60
        EOF

    - name: Wait for Windows instance to fully boot
      run: |
        echo "Waiting for Windows instance to complete startup and WinRM configuration..."
        echo "This may take 5-10 minutes for Windows Server to fully initialize."
        sleep 300
        echo "Wait completed. Proceeding with connectivity tests..."

    - name: Test WinRM connectivity
      run: |
        echo "Testing WinRM connectivity to ${{ inputs.windows_host }}..."
        
        # Test port 5985 (HTTP WinRM)
        for i in {1..5}; do
          echo "Attempt $i: Testing port 5985..."
          if timeout 10 bash -c "</dev/tcp/${{ inputs.windows_host }}/5985" 2>/dev/null; then
            echo "✅ Port 5985 is accessible"
            PORT_5985_OK=true
            break
          else
            echo "❌ Port 5985 attempt $i failed"
            sleep 30
          fi
        done
        
        # Test port 5986 (HTTPS WinRM)  
        echo "Testing WinRM HTTPS connectivity to ${{ inputs.windows_host }}:5986..."
        timeout 10 bash -c "</dev/tcp/${{ inputs.windows_host }}/5986" && echo "✅ Port 5986 is accessible" || echo "❌ Port 5986 is not accessible"
        
        if [ "$PORT_5985_OK" != "true" ]; then
          echo "⚠️ WinRM port 5985 is still not accessible after 5 attempts"
          echo "The instance may still be booting or WinRM may not be configured properly"
        fi
      continue-on-error: true

    - name: Test Windows connection
      run: |
        echo "Testing Ansible connection to Windows host..."
        ansible windows -m win_ping -v
      continue-on-error: true

    - name: Run IIS Configuration Playbook
      if: inputs.playbook == 'all' || inputs.playbook == 'iis_configuration'
      run: |
        ansible-playbook playbooks/windows/iis_configuration/setup_iis.yml \
          -e windows_password="${{ secrets.PASSWORD }}" \
          -e username="${{ secrets.USERNAME }}" \
          -e password="${{ secrets.PASSWORD }}" \
          -e app_pool_name="MyAppPool" \
          -e website_name="MyWebSite" \
          -e website_port="80" \
          -v

    - name: Run System Management Playbook
      if: inputs.playbook == 'all' || inputs.playbook == 'system_management'
      run: |
        ansible-playbook playbooks/windows/system_management/configure_system.yml \
          -e windows_password="${{ secrets.PASSWORD }}" \
          -e username="${{ secrets.USERNAME }}" \
          -e password="${{ secrets.PASSWORD }}" \
          -v

    - name: Run File Management Playbook
      if: inputs.playbook == 'all' || inputs.playbook == 'file_management'
      run: |
        ansible-playbook playbooks/windows/file_management/manage_files.yml \
          -e windows_password="${{ secrets.PASSWORD }}" \
          -e username="${{ secrets.USERNAME }}" \
          -e password="${{ secrets.PASSWORD }}" \
          -e copy_app_files=true \
          -v

    - name: Run Networking Configuration Playbook
      if: inputs.playbook == 'all' || inputs.playbook == 'networking'
      run: |
        ansible-playbook playbooks/windows/networking/configure_network.yml \
          -e windows_password="${{ secrets.PASSWORD }}" \
          -e username="${{ secrets.USERNAME }}" \
          -e password="${{ secrets.PASSWORD }}" \
          -v

    - name: Run AWS Integration Playbook
      if: inputs.playbook == 'all' || inputs.playbook == 'aws_integration'
      run: |
        ansible-playbook playbooks/windows/aws_integration/aws_setup.yml \
          -e windows_password="${{ secrets.PASSWORD }}" \
          -e username="${{ secrets.USERNAME }}" \
          -e password="${{ secrets.PASSWORD }}" \
          -e aws_access_key="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e aws_secret_key="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -v

    - name: Capture Ansible Results
      id: results
      run: |
        echo "ansible_results=Ansible playbooks executed successfully for host ${{ inputs.windows_host }}" >> $GITHUB_OUTPUT
        echo "✅ Ansible configuration completed for Windows host: ${{ inputs.windows_host }}"