name: Deploy Terraform Infrastructure

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'
  # CHANGE THIS to a globally-unique bucket name you own
  TF_STATE_BUCKET: 'cloudbuilderprototype-tfstate-prod'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Ensure Terraform State S3 Bucket
      id: ensure_state_bucket
      run: |
        set -euo pipefail
        BUCKET="${TF_STATE_BUCKET}"
        REGION="${AWS_REGION}"

        echo "Checking if S3 bucket '${BUCKET}' exists..."
        if aws s3api head-bucket --bucket "${BUCKET}" 2>/dev/null; then
          echo "Bucket '${BUCKET}' already exists. Skipping creation."
        else
          echo "Bucket '${BUCKET}' not found. Creating..."
          # us-east-1 creation syntax differs (no LocationConstraint)
            if [ "${REGION}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "${BUCKET}"
            else
              aws s3api create-bucket --bucket "${BUCKET}" --create-bucket-configuration LocationConstraint="${REGION}"
            fi

          echo "Enabling versioning..."
          aws s3api put-bucket-versioning \
            --bucket "${BUCKET}" \
            --versioning-configuration Status=Enabled

          echo "Applying default encryption (AES256)..."
          aws s3api put-bucket-encryption \
            --bucket "${BUCKET}" \
            --server-side-encryption-configuration '{
              "Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]
            }'

          echo "Blocking all public access..."
          aws s3api put-public-access-block \
            --bucket "${BUCKET}" \
            --public-access-block-configuration '{
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            }'

          echo "S3 bucket '${BUCKET}' created and secured."
        fi

        echo "State bucket step complete."

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        # If your Terraform code already has a backend "s3" block with the same bucket/key, this standard init is fine.
        terraform init
        # Otherwise, you could use (uncomment and adjust key/dynamodb_table):
        # terraform init \
        #   -backend-config="bucket=${TF_STATE_BUCKET}" \
        #   -backend-config="key=global/terraform.tfstate" \
        #   -backend-config="region=${AWS_REGION}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
