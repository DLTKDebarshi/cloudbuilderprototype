name: Deploy Combined Infrastructure Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_validation:
        description: 'Skip AWS validation'
        required: false
        default: false
        type: boolean
      destroy_infrastructure:
        description: 'Destroy infrastructure instead of deploying'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: 'us-east-1'
  TERRAFORM_VERSION: '1.5.0'
  ANSIBLE_VERSION: '6.0.0'
  DOTNET_VERSION: '6.0.x'

jobs:
  # Stage 1: Deploy Networking Infrastructure
  deploy-networking:
    name: 'Deploy Stage 1: Networking'
    uses: ./.github/workflows/template-terraform.yml
    with:
      terraform_stage: 'stage1-networking'
      terraform_version: '1.5.0'
      aws_region: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

  # Stage 2: Deploy Networking Services
  deploy-networking-services:
    name: 'Deploy Stage 2: Networking Services'
    needs: deploy-networking
    uses: ./.github/workflows/template-terraform.yml
    with:
      terraform_stage: 'stage2-networking-services'
      terraform_version: '1.5.0'
      aws_region: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

  # Stage 3: Deploy Security Infrastructure
  deploy-security:
    name: 'Deploy Stage 3: Security'
    needs: deploy-networking
    uses: ./.github/workflows/template-terraform.yml
    with:
      terraform_stage: 'stage3-security'
      terraform_version: '1.5.0'
      aws_region: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

  # Stage 4: Deploy Compute Infrastructure
  deploy-compute:
    name: 'Deploy Stage 4: Compute'
    needs: [deploy-networking-services, deploy-security]
    uses: ./.github/workflows/template-terraform.yml
    with:
      terraform_stage: 'stage4-compute'
      terraform_version: '1.5.0'
      aws_region: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

  # Get Windows Host IP for subsequent stages
  get-infrastructure-info:
    name: 'Get Infrastructure Information'
    runs-on: ubuntu-latest
    needs: deploy-compute
    outputs:
      windows_host: ${{ steps.get_ip.outputs.windows_host }}
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Windows Host IP
      id: get_ip
      run: |
        # Get the public IP from SSM parameter for web_server instance
        WINDOWS_IP=$(aws ssm get-parameter --name "/terraform/stage4/instance/web_server/public_ip" --region ${{ env.AWS_REGION }} --query 'Parameter.Value' --output text)
        echo "windows_host=$WINDOWS_IP" >> $GITHUB_OUTPUT
        echo "Windows host IP: $WINDOWS_IP"

  # Run AWS Validation
  validate-infrastructure:
    name: 'Validate AWS Infrastructure'
    runs-on: ubuntu-latest
    needs: [deploy-compute, get-infrastructure-info]
    if: github.ref == 'refs/heads/main' && github.event.inputs.skip_validation != 'true'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run Infrastructure Validation
      run: |
        ./scripts/validate-deployment.sh
      env:
        AWS_REGION: ${{ env.AWS_REGION }}

    - name: Upload Validation Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: /tmp/validation-*.log
        retention-days: 30

  # Deploy Ansible Configuration (Prerequisites)
  deploy-ansible:
    name: 'Configure Server with Ansible'
    needs: [get-infrastructure-info, validate-infrastructure]
    if: always() && needs.get-infrastructure-info.result == 'success' && (needs.validate-infrastructure.result == 'success' || needs.validate-infrastructure.result == 'skipped')
    uses: ./.github/workflows/template-ansible.yml
    with:
      playbook: 'all'
      windows_host: ${{ needs.get-infrastructure-info.outputs.windows_host }}
      ansible_version: '6.0.0'
      aws_region: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      WINDOWS_PASSWORD: ${{ secrets.WINDOWS_PASSWORD }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

  # Deploy .NET Application
  deploy-dotnet-app:
    name: 'Deploy .NET Application'
    needs: [get-infrastructure-info, deploy-ansible]
    if: always() && needs.get-infrastructure-info.result == 'success' && needs.deploy-ansible.result == 'success'
    uses: ./.github/workflows/template-dotnet-app.yml
    with:
      windows_host: ${{ needs.get-infrastructure-info.outputs.windows_host }}
      dotnet_version: '6.0.x'
      app_name: 'CloudBuilderHelloWorld'
      deployment_path: 'C:\Apps\WebApp'
      aws_region: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      WINDOWS_PASSWORD: ${{ secrets.WINDOWS_PASSWORD }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

  # Test Web Application (after deployment)
  test-web-application:
    name: 'Test Web Application'
    runs-on: ubuntu-latest
    needs: [get-infrastructure-info, deploy-dotnet-app]
    if: needs.deploy-dotnet-app.result == 'success'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Test Web Application
      run: |
        ./scripts/test-web-application.sh
      env:
        AWS_REGION: ${{ env.AWS_REGION }}

  # Final Validation and Summary
  deployment-summary:
    name: 'Deployment Summary'
    runs-on: ubuntu-latest
    needs: [get-infrastructure-info, deploy-networking, deploy-networking-services, deploy-security, deploy-compute, validate-infrastructure, deploy-ansible, deploy-dotnet-app, test-web-application]
    if: always()
    steps:
    - name: Deployment Results
      run: |
        echo "## 🚀 CloudBuilder Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Infrastructure Status
        echo "### Infrastructure Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Stage 1: Networking - Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Stage 2: Networking Services - Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Stage 3: Security - Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Stage 4: Compute - Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Application Status
        echo "### Application Deployment" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy-ansible.result }}" = "success" ]; then
          echo "- ✅ Ansible Configuration - Completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Ansible Configuration - Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-dotnet-app.result }}" = "success" ]; then
          echo "- ✅ .NET Application - Deployed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ .NET Application - Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Access Information
        if [ "${{ needs.get-infrastructure-info.outputs.windows_host }}" != "" ]; then
          echo "### 🌐 Access Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL**: http://${{ needs.get-infrastructure-info.outputs.windows_host }}" >> $GITHUB_STEP_SUMMARY
          echo "- **IIS Server**: ${{ needs.get-infrastructure-info.outputs.windows_host }}" >> $GITHUB_STEP_SUMMARY
          echo "- **RDP Access**: ${{ needs.get-infrastructure-info.outputs.windows_host }}:3389" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Your application is now live!**" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Success Notification
      if: needs.deploy-dotnet-app.result == 'success'
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application URL: http://${{ needs.get-infrastructure-info.outputs.windows_host }}"
        echo "🖥️  RDP Access: ${{ needs.get-infrastructure-info.outputs.windows_host }}:3389"