name: Deploy .NET Application

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/dotnet-hello-world/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/dotnet-hello-world/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOTNET_VERSION: '6.0.x'
  APP_NAME: 'CloudBuilderHelloWorld'
  DEPLOYMENT_PATH: 'C:\Apps\WebApp'

jobs:
  build:
    name: 'Build .NET Application'
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore app/dotnet-hello-world/${{ env.APP_NAME }}.csproj

    - name: Build application
      run: dotnet build app/dotnet-hello-world/${{ env.APP_NAME }}.csproj --configuration Release --no-restore

    - name: Test application
      run: dotnet test app/dotnet-hello-world/${{ env.APP_NAME }}.csproj --configuration Release --no-build --verbosity normal
      continue-on-error: true

    - name: Publish application
      run: dotnet publish app/dotnet-hello-world/${{ env.APP_NAME }}.csproj --configuration Release --output ./publish --no-build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-app
        path: ./publish
        retention-days: 30

  deploy:
    name: 'Deploy to Windows Server'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dotnet-app
        path: ./publish

    - name: Setup Python for Ansible
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible pywinrm boto3 botocore

    - name: Install Ansible Collections
      run: |
        ansible-galaxy collection install ansible.windows
        ansible-galaxy collection install community.windows

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../app-deployment.zip .
        cd ..

    - name: Create inventory file
      run: |
        echo "[windows]" > inventory.ini
        echo "${{ secrets.WINDOWS_HOST }} ansible_host=${{ secrets.WINDOWS_HOST }}" >> inventory.ini

    - name: Create deployment playbook
      run: |
        cat > deploy-app.yml << 'EOF'
        ---
        - name: Deploy .NET Application to Windows IIS
          hosts: windows
          gather_facts: false
          vars:
            ansible_user: Administrator
            ansible_password: "${{ secrets.WINDOWS_PASSWORD }}"
            ansible_connection: winrm
            ansible_winrm_server_cert_validation: ignore
            ansible_winrm_transport: basic
            ansible_port: 5985
            app_name: "${{ env.APP_NAME }}"
            deployment_path: "${{ env.DEPLOYMENT_PATH }}"

          tasks:
            - name: Ensure deployment directory exists
              ansible.windows.win_file:
                path: "{{ deployment_path }}"
                state: directory

            - name: Stop IIS website
              community.windows.win_iis_website:
                name: "{{ app_name }}"
                state: stopped
              ignore_errors: true

            - name: Copy application files
              ansible.windows.win_copy:
                src: "./app-deployment.zip"
                dest: "C:\\Temp\\app-deployment.zip"

            - name: Extract application files
              community.windows.win_unzip:
                src: "C:\\Temp\\app-deployment.zip"
                dest: "{{ deployment_path }}"
                delete_archive: true

            - name: Create IIS Application Pool
              community.windows.win_iis_webapppool:
                name: "{{ app_name }}Pool"
                state: present
                attributes:
                  processModel.identityType: ApplicationPoolIdentity
                  recycling.periodicRestart.time: "1.05:00:00"
                  processModel.loadUserProfile: true

            - name: Create/Update IIS Website
              community.windows.win_iis_website:
                name: "{{ app_name }}"
                state: present
                port: 80
                ip: "*"
                hostname: ""
                application_pool: "{{ app_name }}Pool"
                physical_path: "{{ deployment_path }}"

            - name: Start IIS website
              community.windows.win_iis_website:
                name: "{{ app_name }}"
                state: started

            - name: Ensure IIS service is running
              ansible.windows.win_service:
                name: W3SVC
                state: started
                start_mode: auto

            - name: Test application endpoint
              ansible.windows.win_uri:
                url: "http://localhost"
                method: GET
                status_code: [200, 404]
              register: app_test
              retries: 3
              delay: 10

            - name: Display deployment result
              ansible.builtin.debug:
                msg: "Application deployed successfully! HTTP Status: {{ app_test.status_code }}"
        EOF

    - name: Deploy application
      run: |
        ansible-playbook deploy-app.yml -i inventory.ini

    - name: Verify deployment
      run: |
        echo "Deployment completed successfully!"
        echo "Application should be accessible at: http://${{ secrets.WINDOWS_HOST }}"

  health-check:
    name: 'Post-Deployment Health Check'
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Wait for application startup
      run: sleep 30

    - name: Health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.WINDOWS_HOST }}/Home/Health || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed - Application is healthy"
        else
          echo "❌ Health check failed - HTTP status: $response"
          exit 1
        fi

    - name: Smoke test
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.WINDOWS_HOST }} || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Smoke test passed - Application is accessible"
        else
          echo "❌ Smoke test failed - HTTP status: $response"
          exit 1
        fi