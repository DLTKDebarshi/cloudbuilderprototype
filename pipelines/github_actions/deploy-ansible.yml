name: Deploy Ansible Configuration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      playbook:
        description: 'Playbook to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - iis_configuration
        - system_management
        - file_management
        - networking
        - aws_integration
  push:
    branches: [ main ]
    paths:
      - 'playbooks/**'

env:
  ANSIBLE_VERSION: '6.0.0'
  AWS_REGION: 'us-east-1'

jobs:
  ansible:
    name: 'Run Ansible Playbooks'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        pip install pywinrm
        pip install boto3
        pip install botocore
        
    - name: Install Ansible Collections
      run: |
        ansible-galaxy collection install ansible.windows
        ansible-galaxy collection install community.windows
        ansible-galaxy collection install amazon.aws

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create inventory file
      run: |
        echo "[windows]" > inventory.ini
        echo "${{ secrets.WINDOWS_HOST }} ansible_host=${{ secrets.WINDOWS_HOST }}" >> inventory.ini

    - name: Create ansible.cfg
      run: |
        cat > ansible.cfg << EOF
        [defaults]
        host_key_checking = False
        inventory = inventory.ini
        remote_user = Administrator
        
        [inventory]
        enable_plugins = aws_ec2
        EOF

    - name: Run IIS Configuration Playbook
      if: github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'iis_configuration'
      run: |
        ansible-playbook playbooks/windows/iis_configuration/setup_iis.yml \
          -e windows_password="${{ secrets.WINDOWS_PASSWORD }}" \
          -e app_pool_name="MyAppPool" \
          -e website_name="MyWebSite" \
          -e website_port="80"

    - name: Run System Management Playbook
      if: github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'system_management'
      run: |
        ansible-playbook playbooks/windows/system_management/configure_system.yml \
          -e windows_password="${{ secrets.WINDOWS_PASSWORD }}"

    - name: Run File Management Playbook
      if: github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'file_management'
      run: |
        ansible-playbook playbooks/windows/file_management/manage_files.yml \
          -e windows_password="${{ secrets.WINDOWS_PASSWORD }}" \
          -e copy_app_files=true

    - name: Run Networking Configuration Playbook
      if: github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'networking'
      run: |
        ansible-playbook playbooks/windows/networking/configure_network.yml \
          -e windows_password="${{ secrets.WINDOWS_PASSWORD }}"

    - name: Run AWS Integration Playbook
      if: github.event.inputs.playbook == 'all' || github.event.inputs.playbook == 'aws_integration'
      run: |
        ansible-playbook playbooks/windows/aws_integration/aws_setup.yml \
          -e windows_instance_id="${{ secrets.WINDOWS_INSTANCE_ID }}" \
          -e private_key_file="${{ secrets.PRIVATE_KEY_FILE }}" \
          -e aws_access_key="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e aws_secret_key="${{ secrets.AWS_SECRET_ACCESS_KEY }}"